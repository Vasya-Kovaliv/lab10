from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import ec, utils

class ECDSAWrap:
    def __init__(self, curve=ec.SECP256R1()):
        self.curve = curve

    def generate_keypair(self):
        private_key = ec.generate_private_key(self.curve)
        public_key = private_key.public_key()
        return private_key, public_key

    def add_points(self, point1, point2):
        return self.curve.generator + point1 + point2

    def subtract_points(self, point1, point2):
        return self.curve.generator + point1 - point2

    def serialize_private_key(self, private_key):
        return private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ).decode()

    def deserialize_private_key(self, serialized_private_key):
        return serialization.load_pem_private_key(
            serialized_private_key.encode(),
            password=None
        )

    def serialize_public_key(self, public_key):
        return public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ).decode()

    def deserialize_public_key(self, serialized_public_key):
        return serialization.load_pem_public_key(
            serialized_public_key.encode()
        )

    def serialize_signature(self, signature):
        return signature.hex()

    def deserialize_signature(self, serialized_signature):
        return bytes.fromhex(serialized_signature)


# Функція підпису повідомлення
def sign_message(private_key, message):
    hashed_message = hashes.Hash(hashes.SHA256())
    hashed_message.update(message.encode())
    digest = hashed_message.finalize()
    signature = private_key.sign(digest, ec.ECDSA(utils.Prehashed(hashes.SHA256())))
    return signature

# Функція перевірки підпису
def verify_signature(public_key, message, signature):
    hashed_message = hashes.Hash(hashes.SHA256())
    hashed_message.update(message.encode())
    digest = hashed_message.finalize()
    try:
        public_key.verify(signature, digest, ec.ECDSA(utils.Prehashed(hashes.SHA256())))
        return True
    except:
        return False


# Використання обгортки ECDSAWrap
curve = ec.SECP256R1()
ecdsa_wrap = ECDSAWrap(curve)
private_key, public_key = ecdsa_wrap.generate_keypair()

# Використання підпису та перевірки повідомлення
message = "Hello, world!"
signature = sign_message(private_key, message)
is_valid = verify_signature(public_key, message, signature)

# Відобразимо результати
print("Private Key:", ecdsa_wrap.serialize_private_key(private_key))
print("Public Key:", ecdsa_wrap.serialize_public_key(public_key))
print("Message:", message)
print("Signature:", ecdsa_wrap.serialize_signature(signature))
print("Is Valid Signature?", is_valid)
